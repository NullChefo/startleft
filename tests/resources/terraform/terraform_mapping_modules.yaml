trustzones:
  - id: b61d6911-338d-46a8-9f39-8dcd24abfe91
    name: Public Cloud

  # SG MAPPING (AUXILIARY SG)
  # type 4
  - id: f0ba7722-39b6-4c81-8290-a30a248bb8d9
    name: Internet
    $source: { $singleton: { $root: "resource|squash_terraform(@)[?Type=='aws_security_group' && Properties.egress[0].cidr_blocks]" } }

# The order of the components is important because parent components must be defined before child components
components:
  - id: { $format: "{name}" }
    type: CD-ACM
    name: { $numberOfSources: { oneSource: { $path: "keys(@)[0]" }, multipleSource: { $format: "CD-ACM (grouped)" } } }
    $source: { $singleton: { $root: "resource|get(@, 'aws_acm_certificate')" } }
    parent: b61d6911-338d-46a8-9f39-8dcd24abfe91
    tags:
      - { $numberOfSources: { oneSource: { $path: "Type" }, multipleSource: { $format: "{_key} ({Type})" } } }

  - id: { $format: "{name}" }
    type: cloudwatch
    name: { $numberOfSources: { oneSource: { $path: "keys(@)[0]" }, multipleSource: { $format: "cloudwatch (grouped)" } } }
    $source: { $singleton: { $root: "resource|get(@, 'aws_cloudwatch_metric_alarm')" } }
    parent: b61d6911-338d-46a8-9f39-8dcd24abfe91
    tags:
      - { $numberOfSources: { oneSource: { $path: "Type" }, multipleSource: { $format: "{_key} ({Type})" } } }

  - id: { $format: "{name}" }
    type: dynamodb
    name: { $path: "keys(@)[0]" }
    $source: { $root: "resource|get(@, 'aws_dynamodb_table')" }
    $altsource:
      - $mappingType: { $root: "resource|get(@, 'aws_vpc_endpoint')" }
        $mappingPath: { $path: "*.service_name | [0]" }
        $mappingLookups:
          - regex: ^(.*)dynamodb$
            name: DynamoDB from VPCEndpoint
            type: dynamodb
            tags:
              - { $format: "{_key} ({Type})" }
    parent: b61d6911-338d-46a8-9f39-8dcd24abfe91
    tags:
      - { $path: "Type" }

  - id: { $format: "{name}" }
    type: vpc
    name: { $path: "keys(@)[0]" }
    $source: { $root: "resource|get(@, 'aws_vpc')" }
    parent: b61d6911-338d-46a8-9f39-8dcd24abfe91
    tags:
      - { $path: "Type" }

  - id: { $format: "{name}" }
    type: ec2
    $source: { $root: "resource|get(@, 'aws_instance')" }
    name: { $path: "keys(@)[0]" }
    parent: { $path: "*.subnet_id[0] | [0] | re_sub('[\\$\\{\\}]', '', @)" } #TODO
    tags:
      - { $path: "Type" }

  - id: { $format: "{name}" }
    type: rds
    name: { $path: "_key" }
    $source: { $root: "module|get_module_terraform(@, 'terraform-aws-modules/rds/aws')" }
    parent: b61d6911-338d-46a8-9f39-8dcd24abfe91
    tags:
      - { $path: "Type" }

dataflows:
  #### Security Groups ####
  #### Type 1 #### - Resource to Security Group
  - id: { $format: "{name}" }
    name: { $format: "{_key}" }
    $source: { $root: "resource|squash_terraform(@)[?contains(keys(Properties), 'security_group_ids')]" }
    source: { $path: "_key" }
    destination: { $hub: { $path: "Properties.security_group_ids" } }
    tags:

  - id: { $format: "{name}" }
    name: { $format: "{_key}" }
    $source: { $root: "resource|squash_terraform(@)[?contains(keys(Properties), 'security_groups')]" }
    source: { $path: "_key" }
    destination: { $hub: { $path: "Properties.security_groups" } }
    tags:

  - id: { $format: "{name}" }
    name: { $format: "{_key}" }
    $source: { $root: "resource|squash_terraform(@)[?contains(keys(Properties), 'network_configuration') && contains(keys(Properties.network_configuration[0]), 'security_groups')]" }
    source: { $path: "_key" }
    destination: { $hub: { $path: "Properties.network_configuration[0].security_groups" } }
    tags:

  - id: { $format: "{name}" }
    name: { $format: "{_key}" }
    $source: { $root: "resource|squash_terraform(@)[?contains(keys(Properties), 'vpc_config')]" }
    source: { $path: "_key" }
    destination: { $hub: { $path: "Properties.vpc_config[0].security_group_ids" } }
    tags:
  #### Type 2 #### Security Group to Security Group
  - id: { $format: "{name}" }
    name: { $format: "{_key}" }
    $source: { $root: "resource|squash_terraform(@)[?Type=='aws_security_group_rule' && Properties.type=='ingress']" }
    source: { $hub: { $path: "Properties.source_security_group_id" } }
    destination: { $hub: { $path: "Properties.security_group_id" } }
    tags:
      - $path: "Properties.description"
      - $path: "Properties.protocol"
      - $path: "Properties.from_port|to_string(@)"
      - $path: "Properties.to_port|to_string(@)"

  - id: { $format: "{name}" }
    name: { $format: "{_key}" }
    $source: { $root: "resource|squash_terraform(@)[?Type=='aws_security_group_rule' && Properties.type=='egress']" }
    source: { $hub: { $path: "Properties.security_group_id" } }
    destination: { $hub: { $path: "Properties.source_security_group_id" } }
    tags:
      - $path: "Properties.description"
      - $path: "Properties.protocol"
      - $path: "Properties.from_port|to_string(@)"
      - $path: "Properties.to_port|to_string(@)"
  #### Type 3 #### - Security Group to Resource
  - id: { $format: "{name}" }
    name: { $format: "{_key}" }
    $source: { $root: "resource|squash_terraform(@)[?Type=='aws_security_group']" }
    source: { $path: "Properties.ingress[0].cidr_blocks" }
    destination: { $hub: { $path: "_key" } }
    tags:
      - $path: "Properties.ingress[0].description"
      - $path: "Properties.ingress[0].protocol"
      - $path: "Properties.ingress[0].from_port|to_string(@)"
      - $path: "Properties.ingress[0].to_port|to_string(@)"

  - id: { $format: "{name}" }
    name: { $format: "{_key}" }
    $source: { $root: "resource|squash_terraform(@)[?Type=='aws_security_group']" }
    source: { $hub: { $path: "_key" } }
    destination: { $path: "Properties.egress[0].cidr_blocks" }
    tags:
      - $path: "Properties.egress[0].description"
      - $path: "Properties.egress[0].protocol"
      - $path: "Properties.egress[0].cidr_blocks|join(',', @)"
  #### Security Groups ####
  - id: { $format: "{name}" }
    name: { $format: "dataflow to Lambda function in {_key}" }
    $source: { $root: "resource|squash_terraform(@)[?Type=='aws_lambda_event_source_mapping']" }
    source: { $path: "Properties.event_source_arn" }
    destination: { $path: "Properties.function_name" }

  - id: { $format: "{name}" }
    name: { $format: "dataflow from Lambda function on Failure {_key}" }
    $source: { $root: "resource|squash_terraform(@)[?Type=='aws_lambda_event_source_mapping']" }
    source: { $path: "Properties.function_name" }
    destination: { $path: "Properties.destination_config[0].on_failure[0].destination_arn" }

  # The parameter "logging" is deprecated. Use the resource "aws_s3_bucket_logging" instead
  - id: { $format: "{name}" }
    name: { $format: "S3 dataflow from {_key}" }
    $source: { $root: "resource|squash_terraform(@)[?Type=='aws_s3_bucket']" }
    source: { $path: "_key" }
    destination: { $path: "Properties.logging[0].target_bucket" }
  - id: { $format: "{name}" }
    name: { $format: "S3 dataflow from {Type}" }
    $source: { $root: "resource|squash_terraform(@)[?Type=='aws_s3_bucket_logging']" }
    source: { $path: "Properties.bucket" }
    destination: { $path: "Properties.target_bucket" }
  # The parameter "logging" is deprecated. Use the resource "aws_s3_bucket_logging" instead

  - id: { $format: "{name}" }
    name: { $format: "API gateway data flow from {Type}" }
    $source: { $root: "resource|squash_terraform(@)[?Type=='aws_api_gateway_authorizer']" }
    source: { $numberOfSources: { oneSource: { $path: "_key" }, multipleSource: { $format: "api-gateway (grouped)" } } }
    destination: { $path: "Properties.provider_arns[0]" }
    tags:
      - API gateway dataflow
